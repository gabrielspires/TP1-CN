#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\date{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language brazilian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "times" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 3cm
\rightmargin 2.5cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
TP 1 - Regressão Simbólica com Programação Genética
\end_layout

\begin_layout Author
Gabriel Henrique Souto Pires {gabrielpires@dcc.ufmg.br}
\end_layout

\begin_layout Date
Computação Natural - 2/2017 
\begin_inset Newline linebreak
\end_inset

Departamento de Ciência da Computação
\begin_inset Newline linebreak
\end_inset

Universidade Federal de Minas Gerais
\end_layout

\begin_layout Abstract

\emph on
Regressão simbólica é um dos problemas mais conhecidos em Programação Genética.
 É comumente usado como um problema de ajuste para novos algoritmos, mas
 também é amplamente usado em casos onde outros métodos de regressão podem
 não ser ideais.
 É conceptualmente um problema simples, e portanto é uma boa forma de se
 introduzir programação genética.
 Este documento tem como objetivo analisar, discutir e apresentar este problema,
 assim como formas de resolvê-lo através de programação genética.
 Serão apresentados detalhes da implementação, assim como experimentos feitos
 nas bases de dados fornecidas à fim de concluir como a programação genética
 é útil na resolução desse tipo de problema.
\end_layout

\begin_layout Section
Introdução
\end_layout

\begin_layout Standard
O problema de regressão simbólica consiste em encontrar uma expressão matemática
 que melhor descreve uma relação dada por um conjunto de valores.
 Começamos construindo uma população de fórmulas geradas de forma aleatória
 para representar uma relação entre variáveis independentes conhecidas e
 uma parte dependente destas variáveis.
 Cada geração de 
\begin_inset Quotes eld
\end_inset

funções
\begin_inset Quotes erd
\end_inset

 é então evoluída da geração que veio antes dela selecionando a 
\emph on
fitness
\emph default
 dos indivíduos da população para que operações genéticas sejam feitas sobre
 eles.
 
\end_layout

\begin_layout Standard
À medida que indivíduos bons são encontrados, esses indivíduos são mantidos
 na população seguinte para que sua 
\begin_inset Quotes eld
\end_inset

qualidade
\begin_inset Quotes erd
\end_inset

 seja passada adiante.
 Este procedimento é chamado de 
\emph on
elitismo
\emph default
.
 Novos indivíduos são gerados através de cruzamento ou mutação.
 No caso do cruzamento 2 
\begin_inset Quotes eld
\end_inset

pais
\begin_inset Quotes erd
\end_inset

 são selecionados para dar origem a dois novos indivíduos.
 Essa seleção é feita por meio de torneio, onde um número de indivíduos
 da população é selecionado ao acaso e estes indivíduos competem entre si,
 o indivíduo com o melhor fitness é então selecionado como vencedor e é
 usado no cruzamento.
 Na mutação, um dos filhos gerados pelo cruzamento tem uma chance de ter
 sua árvore alterada por redução, expansão ou então ter apenas um nó alterado,
 o que gera mais diversidade na população, uma vez que as possíveis soluções
 não ficam presas à diversidade criada na geração da população inicial.
\end_layout

\begin_layout Standard
Depois que uma nova população é criada, o processo é aplicado à ela e às
 gerações seguintes até que se chegue em um critério de parada.
\end_layout

\begin_layout Section
Implementação
\end_layout

\begin_layout Standard
Os indivíduos são representados como árvores, sendo que os nós internos
 são operadores (funções) e as folhas são constantes ou variáveis.
 Os operadores disponíveis para a criação dos indivíduos são {
\begin_inset Formula $+,-,*,/,cos,sin$
\end_inset

} sendo que os operadores que representam funções trigonométricas tem apenas
 um filho à direita e os demais operadores tem sempre dois filhos, que podem
 ser variáveis, terminais, ou outros operadores.
 Cada operador da como saída um número, e pode receber como entrada a saída
 de outro operador, obedecendo a propriedade de 
\emph on
fechamento
\emph default
.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename indiv_tree.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Indivíduo que representa a expressão 
\begin_inset Formula $(\frac{5}{x1}+cos(2*x2))$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Os indivíduos e as árvores usadas para representar os indivíduos foram implement
ados em duas classes que contém os atributos necessários para rodar o algoritmo.
 Alguns destes atributos são:
\end_layout

\begin_layout Subsubsection*
Classe Indivíduo
\end_layout

\begin_layout Itemize
genotype: Ponteiro para a raiz da árvore de expressão (representação do
 indivíduo).
\end_layout

\begin_layout Itemize
ind_size: Tamanho da árvore que o indivíduo tem (usado para limitar o cresciment
o do indivíduo).
\end_layout

\begin_layout Itemize
num_of_var: Quantas variáveis existem no arquivo de entrada (x1, x2, ..., x8
 por exemplo).
\end_layout

\begin_layout Itemize
node_number: Usado para dar um número identificador para cada nó, o que
 ajuda na hora de sortear um nó na mutação.
\end_layout

\begin_layout Itemize
fitness: A fitness do indivíduo.
\end_layout

\begin_layout Subsubsection*
Classe Tree
\end_layout

\begin_layout Itemize
node_value: O que o nó representa (constante, operador ou variável).
\end_layout

\begin_layout Itemize
left, right: Os filhos desse nó (lembrando que funções trigonométricas só
 tem um filho).
\end_layout

\begin_layout Itemize
number: O número identificador que foi dado para esse nó específico da árvore.
\end_layout

\begin_layout Standard
Algumas constantes também foram criadas para controlar os parâmetros, que
 são:
\end_layout

\begin_layout Itemize
ind_max_size: Tamanho máximo do indivíduo.
\end_layout

\begin_layout Itemize
max_gen: Número máximo de gerações.
\end_layout

\begin_layout Itemize
init_pop_size: Número inicial de indivíduos.
\end_layout

\begin_layout Itemize
max_pop_size: Número máximo de indivíduos que a população pode atingir (após
 isso começam a ser descartados os piores indivíduos).
\end_layout

\begin_layout Itemize
tourn_size: Tamanho do torneio (quanto maior o torneio maior a pressão seletiva).
\end_layout

\begin_layout Itemize
cross_rate: Frequência em que cruzamentos ocorrem.
\end_layout

\begin_layout Itemize
mut_rate: Frequência em que mutações ocorrem.
\end_layout

\begin_layout Standard
Para gerar a população inicial, a função 
\emph on
generate_population
\emph default
 é chamada.
 Dentro dela um loop roda 
\emph on
init_pop_size
\emph default
 vezes criando indivíduos da classe 
\emph on
Individual
\emph default
.
 No construtor da classe 
\emph on
Individual
\emph default
 alguns valores padrão são atribuídos ao objeto e o genótipo do indivíduo
 é gerado.
\end_layout

\begin_layout Standard
Na função 
\emph on
generateGenotype
\emph default
 uma árvore aleatória é criada a partir da raiz.
 A raiz da árvore é criada de forma que seja sempre um operador, dessa forma
 evitamos que a raiz da árvore seja uma constante ou variável, o que nos
 deixaria com uma árvore de um nó só.
 A partir do segundo nó da árvore, cada nó tem uma probabilidade de 60%
 de virar um operador, 20% de virar uma variável e 20% de virar uma constante.
 Essa decisão de implementação foi tomada para evitar que indivíduos muito
 pequenos fossem maioria na população, o que mais tarde iria prejudicar
 a evolução.
 Quando um nó vira uma constante ou variável, ele não gera mais filhos e
 se torna uma folha da árvore.
\end_layout

\begin_layout Standard
Depois de gerar toda a população inicial, a fitness de cada indivíduo é
 calculada na função 
\emph on
calc_fitness
\emph default
 de acordo com a fórmula da raiz quadrada do erro quadrático médio (RMSE)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f(Ind)=\sqrt{\frac{1}{N}\mathop{\sum_{_{i=1}}^{N}(Eval(Ind,x)-y)^{2}}}
\]

\end_inset


\end_layout

\begin_layout Standard
Com a fitness da população calculada, usamos a função 
\emph on
evolve
\emph default
 para criar uma nova população a partir da atual.
 Nessa função verificamos se a população atingiu o limite de indivíduos,
 se sim a função 
\emph on
remove_worst
\emph default
 é chamada para remover o indivíduo com a pior fitness da população.
 Após isso a função 
\emph on
keep_the_elite
\emph default
 é chamada e faz o inverso da função anterior, salvando e enviando para
 a próxima população o indivíduo com a melhor fitness da população atual.
\end_layout

\begin_layout Standard
Depois de manter o elite, rodamos um loop até que a população esteja vazia.
 Nesse loop temos uma chance de chamar o crossover e uma chance de simplesmente
 reproduzir o indivíduo, No crossover, 2 indivíduos são selecionados por
 um torneio de tamanho 2 e são usados como pais.
 Com os pais selecionados, nós aleatórios das árvores de cada um são selecionado
s e trocados entre eles.
 Após fazer o cruzamento, existe uma probabilidade de que os filhos sofram
 uma mutação, nessa mutação um ou mais nós da árvore do indivíduo são alterados
 aleatoriamente, gerando mais diversidade na população.
 Caso o crossover não seja feito, algum indivíduo da população é jogado
 para a próxima população sem ser alterado.
\end_layout

\begin_layout Section
Experimentos
\end_layout

\begin_layout Section
Conclusões
\end_layout

\begin_layout Section
Bibliografia
\end_layout

\end_body
\end_document
